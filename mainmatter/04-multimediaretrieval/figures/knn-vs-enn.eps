%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 633.000000 327.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.4 (Build 21F79) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 633 327
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 633 327
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /q put
dup 34 /f put
dup 35 /i put
dup 36 /k put
dup 37 /N put
dup 38 /space put
dup 39 /parenleft put
dup 40 /equal put
dup 41 /five put
dup 42 /parenright put
dup 43 /p put
dup 44 /one put
dup 45 /two put
dup 46 /three put
dup 47 /four put
dup 48 /x put
dup 49 /y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<




15140607062627151E013332360135D89371027597B5061B1C152A14162B164952400245FE9E0162FE1B0F111726030104027502033600000001000000010000C1F9E5345F0F3CF5011903E800000000B643F84C00000000DC4364CBFC06FE1F059D04750001000900020000000000000001000003CFFF27001D05DCFC06FE77059D00010000000000000000000000000000001201F4001101160000012800340128FFFA022C004A022C0015022C0011022C0010022C00120258003002E50045014D00000102003A023E00430263003602630020021900000207FFFB000000160016006200AE00D60158022A026C02EE0310035003A203D0040204A0053C0568059E000000010000001200960009006D0004000200000000001E00000200042800030001B800142B01BA0004001000162B01BF00110027001F001A0012000C0000001C2BBF0012002C0025001A0012000C0000001C2BBF00130024001F001A0012000C0000001C2B00BF000E0030002500200017000C0000001C2BBF000F0034002B00200017000C0000001C2BBF0010002A0025001A0012000C0000001C2B00BA00140004001B2BB8000D20457D691844B8000A2B00BA00010002000C2B01BA00030002000C2B01BE00030028002000190012000B00122BBE00040024001D00170011000A00122B00BE00010033002A00210017000E00122BBE0002002A0022001B0013000C00122B00BA0005000400112BB8000020457D691844B800002B00
00>] def
/CharStrings 18 dict dup begin
/.notdef 0 def
/space 1 def
/parenleft 2 def
/parenright 3 def
/one 4 def
/two 5 def
/three 6 def
/four 7 def
/five 8 def
/equal 9 def
/N 10 def
/f 11 def
/i 12 def
/k 13 def
/p 14 def
/q 15 def
/x 16 def
/y 17 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-1018 -481 1437 1141} readonly def
/UniqueID 4124212 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28298042BFC0D231F8B1B12E20417BFC4B622EE2640022E37E13610883BD1380519DDF12DD5B6F5D8B228AF8552FEEE7CF7B215BFEA0260E0C6413862AE6AE9CB4F0FA66D8DBAD6A3832AF9629BA18BF5FBC2C05451384AB50B541F74DA5288D67679E99ADACD1FF2931B75AB0A20D00A910ECD8C357FDACD7B53C8F1EE80D4F3F7E28351441DB75678C4D04E03104359374F26F3E60A98B8B32295E4F760A1EE2D4F275711B8C714282227FB3A9FBB8BCB6A2507CC8836A4359CEFA6550FDECA5AD6BD59B922807066CD828C524752DBC25CDFF0A4218685D1A8A734FD40C009CD30889F3F7FC62F98BCAC51096F1CDF385B4859AEFAF78891E5AFCDDF55595B4B950324D87290177A791AE3AC53DB024224AD658633F3EAE18F9CCB14F89F53647ED93BE329E37A77647507539CAC4699B9777CE758D7D810E308BE6D0DCA0D8605D476CD9F10D61824D708B6A60C9C6884EC04D6EE2855DA2F06941B17F7544EE70E8280BAF12D9F0751B13832ACA4FAAD259784EFBDD970AF2EAB20A9A807461E3C8AAB18BAB3292F3EE617CCD15D47E5ED211D3FED91AE5791FE5C80577650092E13F6EC913314ACE57DB04479645E22C24F83815C5B0146BD4AC1CBAEDC508993EC2A0F28266FB9569E04BE981ED04C51CF675D406521549D495EB735167099D7D4B7BA98CAE2552F1409D66459E2550DE62AA16BEA1544638FB92D33D2B4A88F1F9255B8AC1476B98F4EB4BD34AD0143A74FEBD751FE86FEEB8717C3DE3D41680F

6D1BA5677D34F6E2E77D722655119A0FAC5572D6161B07F54BDEA1EE471F03632896963414E8A507C963C948166ACCF7FB9F47B5377CB9465CA8E453EA526961AFEB36A1111BBC64155D1A2E35782217EDCD8B94232D5D7F278A5704435167AFC6333888881FC539FA3233FE1F062DD43962FCBE5F7D5C9976B8A6EE35E77B790A42FA08BA2A36FA50FC594F873DF5A4445A8963015899C5F72B398C204CE2730F94005FCE0AE302AD1CD83392EBE838F6C2E7A26658D998251F7155405CE9B4CA4707CFFA302BD23970DCD8BB800F09E6C102419F06363ADD1D3ABC1BA272DAA1414CB3F25B1D56704855FD465C3E31121BE88603C5EB79BC9F83C7A0B7E1654101B04CD52EC7BBFE376AA42F8F6C8964E41E8C85BC96AF75F1514C82B93A30D4FCE0434B9E36C275CC83C32760D51C007969E57F55E5BFBAFA033C5DD32C5DF46CE0C7E57A590CD7DD1B6512F79878BB3ECD1A1CDC505BAE562EF9E17C2E4095987BAAD4B357B194EB286F72C5CBABA9C2EAC8CEBA3C43AA3A499C20A71785237C150CBCB04695A2CFA535ED6C2D1E60558153BF8C19E13C14CF2403FC25D33149F06C1AE24A641B250425E482E3E79F5715C99A88E18E830BA46252F671D93E758DFA912C27ABE29762887D344172F30FE3E1F346A93251F9CE0090C4B658B54F5D688A58627CA804E2E67D45FE12C08A1D9F419E3A48BD9A3197E2A7EDFDB72C85A76CDABEC7B841D9EABB70ADE2F2F7874127BFAC63FC9056C7D85020A7BFF28D442B847DFFB07A8606FB8C6E789802F34688178E4CA733AACCE79D2099F80A37E59E7DBE7056EA60CA73E53F9B92B93450AD43B570C57D1146524888320125AEE14BF1F2B156119FCB58BE950409919DB772D9F90955B2508E1348B019A22EFD6F85DD4D556696956AA8B04E4396D0065C73C8A5FC30ADAFB9D4967CF87B4E381F026CBB203C09AC176FB16C15D9F399DC4318DFBC258810DEEB5FA68E428CB1DFA0E63F43D9D08F74AED8C43046888AC853941A8C017A0FE8067AC6CBE948F7A26CB679E55A64F8D55370B1CCC0A95B077751A06E76F857D1A9DDA7593402B51A3DC7E064A2AA8CF8A29B958A8661
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F1.1/HelveticaNeue-Bold renmfont
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin
/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /uni03B4 put
dup 34 /parenleft put
dup 35 /comma put
dup 36 /parenright put
dup 37 /m put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 6 dict dup begin
/.notdef 0 def
/parenleft 1 def
/parenright 2 def
/comma 3 def
/m 4 def
/uni03B4 5 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] readonly def
/FontBBox {-951 -481 1987 1077} readonly def
/UniqueID 4111738 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2852CB9BD3FB4254FD5F0903E5B67D5C2ED1223D2F1D96D0624F745D9E6F43F03B659367FFA32D19EC800C16FDA2148F3E79FF6507ABD874784B3606289E62DFEE787FC13CEEA25CF359413C6ACE03AF2CEE90549BB51236084CE78B268C6F5F308BFC2D8BD75F7C7A9B5A2048C1014B0F91A59DBD561A22FD7F5E65C27704B1AEB20B1CB550EA86E8DD9BEB1DDAC9A3CA2A9EFF6FB02146C87EC189493040C9832F8C8E2AE3992D5A38937A2BE09748FA976F3289735FA39CD38705D3BD2A7C5E9B1024D80EF896EF29C7CB44CF1EFA859733963B3BF2561A07E2163B045126CB87E0168D8E8977C420AE8ADEF11BEF4293B2C69367E5A43351B76AD3E7D6A4455E6EB91FB4B1B633F8472B111559059A0991673398D4F92A3308CFD339B3FB6F1D1E0770E1419096C02C3747CA26EEAEDC3655AC7E348F3C3795158992A82E359C434853B1AB4F13A6721729393268560A43125DDB0AEC3E4576E29B309BC6B971D915B6F9D8FE7F5B5FA52FA289E276635A772B497ADA53B9EA169A4E945FCCC410054F1466062A7A1AD3CA174C0438BA71F463106D3E6E225E383508579E9220F85B5A329AEE401B5A94CDDFE3F38FC79B7CB243CFA0D87822584335840F3A14E378EEDD4D63471ECD87DF87946B8426CBAA2B4CFFB9478EED832CF66B8C1CE0656E3030F1738D7245B65D7C64DC870C3EA0C2FCBBFFE9EC49B206E24D1CEDA4B71581A65C3322F70677F1E79E832CA38F0A9E28821DC0917D8EB9AA19FA0821C2A5D
62235EBDA74B55B7B2FC824C5DA515D1E1E913D7369DB2DCD8FEC713A0C9D24BD586ECFFCEDEE48685308BC73FBB91B00BFA1E7F49BFA519F57ACF953CFB72B1340C1B24B1A57544BB8FC4A3A7AEB5D8BE88750E3964F50BF1FB8748D1AF887146A01A9C976B0E7E8664EBEC9EDA5D440D7226199593C08516469FD191A49F65212E82FB56CDF43E37E7F3A46D86A6322609A4158DF90130F04E87D5BC7BF370C96EC5AA7F1A5BECD2D3731D6927605F32C35E332463E7CCE09B07C577CFE43AC35F0A115F74D03AAF15B095350D39775016CF671FCB3DC9E7AFB4F6F5F15203ADCFD3CFB2483C7650F791AB8C47C31B7AA86E41B591C653037E968728F14BDFEFED0BA710AE9D7586191C1DA19F4244DC1FF05300ECA8A0FC487BF69187D9FE03B3EE7858453E6CEDF68F08E8CB79C2812DCC0D9963BB3928C435FCFEEF49CB7625190B07410D4813239932BBD3E4B72912F9FC7A312B3108194D35918848C4B2D20BC68EFC0510095529FBB0787AF2CDF004571698938B870C48465012842755867F86585E987EE6DE3A69F6F9A55E3E4D63A03E8CB7C952C63DF58833A5C695F7F945076AD9F0B4076E4A58A3B7528B44D20DDE185345B9F6B6543AEAC9720B4635FFC63B0C2E096682
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F2.1/HelveticaNeue renmfont
%RBIBeginFontSubset: Helvetica-Bold
%!FontType1-1.0: Helvetica-Bold 1.0000.1.0000
14 dict begin
/FontName /Helvetica-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /epsilon put
dup 34 /N put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -2084 1 index div -985 2 index div 2810 3 index div 1971 5 -1 roll div]cvx def
/sfnts [<


00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/N 1 def
/epsilon 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-2084 -985 2810 1971} readonly def
/UniqueID 4435977 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28024022816FF807CAF9CEF58EA120E680185C875EBD525A3037498B511C49FE7CD2D3023391FBA7F6F44C427ECF07528CCA199F71D494FC7ED899F9E6E782B4E3A42E09B7045BCDFF893ACC2EA4A9074BD496591A2F810DB0FF2E54F1EE9576E25832D5BCF927EC4D81C3F9FE850AFD3C2874F79F0B1BAAF4BEB72FCF83A76C6BAAF1E430BB01AE0B004D31229144E89CA7CEFA762986D1A9105EE65CC85C85D9588358A53851130EC56966A07862D30F8012658CDEF4179F015F90B26AE4456AAB48B7AFFFB230C31D704404645B35D528783C86AAEC243DE9D860F87D7D51CE5E909376835B680788427483285BB2D6DDFC22B4C31389FBA50A6D49E29BC4AB7C6A1697865642A9A112C222227A6C0F03CBDA5D1005A9843DA6E6E0B2E6CBF49D4C22D3B7D4C5193E45852BD034278A38877E794AC5E3890E3342F0667BA8F73CA875ED8D06F8A39C9652CDA628CF5720076A7B8BFC64830C17F30F679CA39CD6FC3FBDCF8A9D6B6A4E854ADC20EDB7ABD8373499C6A6E31E21F94D0EC1F6EAE5731722453DCE05202B92E90BC72DC14D918439064AACE2680F159E5E639A5C83E827E32CACCE9980E3345DDE1E0E4BB22D5B157A370A39B4963FCFCACE7EF031C9B2FC53DB65AF1E843C3B8E66CA0370BBEEF53CD386E77E93485716BEA08A69847081F29D3B6F0D1940F995B1EDE20A004D2C99B613BB22E7906BF852EA0D9AF026AC37AA3C164
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/Helvetica-Bold cguidfix
/F3.1/Helvetica-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 633 327 rc
1 0 0 -1 -929 1235 cm
951 1204.748 m
951 964.64801 l
S
0 i
CM
22 278.35202 m
19 270.35202 l
25 270.35202 l
h
22 278.35202 m
f
0 J
0 j
1 0 0 -1 -929 1235 cm
951 956.64801 m
948 964.64801 l
954 964.64801 l
h
951 956.64801 m
S
1 J
1 j
0.60000002 i
951 1204.748 m
1191.1 1204.748 l
S
0 i
CM
270.10001 30.25201 m
262.10001 33.25201 l
262.10001 27.25201 l
h
270.10001 30.25201 m
f
0 J
0 j
1 0 0 -1 -929 1235 cm
1199.1 1204.748 m
1191.1 1201.748 l
1191.1 1207.748 l
h
1199.1 1204.748 m
S
0.64705884 0.84313726 0.82352942 sc
CM
39.835339 120.87333 m
41.006916 119.70176 41.006916 117.80226 39.835339 116.63069 c
38.663769 115.45911 36.764275 115.45911 35.592705 116.63069 c
34.421124 117.80226 34.421124 119.70176 35.592705 120.87333 c
36.764275 122.04491 38.663769 122.04491 39.835339 120.87333 c
f
1 0.75 0.75 sc
71.535347 170.87332 m
72.706924 169.70175 72.706924 167.80226 71.535347 166.63068 c
70.363777 165.45911 68.464287 165.45911 67.292717 166.63068 c
66.12114 167.80226 66.12114 169.70175 67.292717 170.87332 c
68.464287 172.04489 70.363777 172.04489 71.535347 170.87332 c
f
0.64705884 0.84313726 0.82352942 sc
123.33535 272.87332 m
124.50693 271.70175 124.50693 269.80225 123.33535 268.63068 c
122.16378 267.45911 120.26429 267.45911 119.09271 268.63068 c
117.92113 269.80225 117.92113 271.70175 119.09271 272.87332 c
120.26429 274.04489 122.16378 274.04489 123.33535 272.87332 c
f
198.83534 283.37332 m
200.00691 282.20175 200.00691 280.30228 198.83534 279.13071 c
197.66377 277.95911 195.76428 277.95911 194.5927 279.13071 c
193.42113 280.30228 193.42113 282.20175 194.5927 283.37332 c
195.76428 284.54492 197.66377 284.54492 198.83534 283.37332 c
f
1 0.75 0.75 sc
222.73535 128.67332 m
223.90694 127.50175 223.90694 125.60226 222.73535 124.43068 c
221.56378 123.2591 219.66429 123.2591 218.49272 124.43068 c
217.32114 125.60226 217.32114 127.50175 218.49272 128.67332 c
219.66429 129.84489 221.56378 129.84489 222.73535 128.67332 c
f
0.64705884 0.84313726 0.82352942 sc
71.535347 59.873329 m
72.706924 58.701756 72.706924 56.802265 71.535347 55.630692 c
70.363777 54.459114 68.464287 54.459114 67.292717 55.630692 c
66.12114 56.802265 66.12114 58.701756 67.292717 59.873329 c
68.464287 61.044907 70.363777 61.044907 71.535347 59.873329 c
f
264.13535 63.073315 m
265.30695 61.901745 265.30695 60.002251 264.13535 58.830681 c
262.96378 57.659103 261.0643 57.659103 259.89273 58.830681 c
258.72113 60.002251 258.72113 61.901745 259.89273 63.073315 c
261.0643 64.244896 262.96378 64.244896 264.13535 63.073315 c
f
0.82352942 0.05882353 0.21568628 sc
147.93535 168.27332 m
149.10693 167.10175 149.10693 165.20226 147.93535 164.03069 c
146.76378 162.8591 144.86429 162.8591 143.69272 164.03069 c
142.52113 165.20226 142.52113 167.10175 143.69272 168.27332 c
144.86429 169.4449 146.76378 169.4449 147.93535 168.27332 c
f
0.64705884 0.84313726 0.82352942 sc
33.835339 207.87332 m
35.006916 206.70175 35.006916 204.80226 33.835339 203.63069 c
32.663769 202.45912 30.764275 202.45912 29.592703 203.63069 c
28.421125 204.80226 28.421125 206.70175 29.592703 207.87332 c
30.764275 209.04491 32.663769 209.04491 33.835339 207.87332 c
f
188.63348 56.373329 m
189.80507 55.201756 189.80507 53.302265 188.63348 52.130692 c
187.46191 50.959114 185.56242 50.959114 184.39085 52.130692 c
183.21927 53.302265 183.21927 55.201756 184.39085 56.373329 c
185.56242 57.544907 187.46191 57.544907 188.63348 56.373329 c
f
0.69411999 0 0.1098 sc
1 0 0 -1 -929 1235 cm
/F1.1[ 12 0 0 -12 0 0]sf
1076.8141 1060.048 m
(!)s
1 0.75 0.75 sc
CM
123.33535 242.07332 m
124.50693 240.90175 124.50693 239.00226 123.33535 237.83069 c
122.16378 236.6591 120.26429 236.6591 119.09271 237.83069 c
117.92113 239.00226 117.92113 240.90175 119.09271 242.07332 c
120.26429 243.2449 122.16378 243.2449 123.33535 242.07332 c
f
194.33536 191.07332 m
195.50693 189.90175 195.50693 188.00226 194.33536 186.83069 c
193.16377 185.6591 191.26428 185.6591 190.09271 186.83069 c
188.92114 188.00226 188.92114 189.90175 190.09271 191.07332 c
191.26428 192.2449 193.16377 192.2449 194.33536 191.07332 c
f
0.64705884 0.84313726 0.82352942 sc
107.53535 83.773315 m
108.70693 82.601746 108.70693 80.702255 107.53535 79.530685 c
106.36378 78.3591 104.46429 78.3591 103.29272 79.530685 c
102.12114 80.702255 102.12114 82.601746 103.29272 83.773315 c
104.46429 84.944893 106.36378 84.944893 107.53535 83.773315 c
f
1 0.75 0.75 sc
125.33535 132.87332 m
126.50693 131.70175 126.50693 129.80225 125.33535 128.63068 c
124.16378 127.45911 122.26429 127.45911 121.09271 128.63068 c
119.92113 129.80225 119.92113 131.70175 121.09271 132.87332 c
122.26429 134.04489 124.16378 134.04489 125.33535 132.87332 c
f
0.64705884 0.84313726 0.82352942 sc
272.73535 185.07332 m
273.90692 183.90175 273.90692 182.00226 272.73535 180.83069 c
271.56378 179.6591 269.66428 179.6591 268.49271 180.83069 c
267.32114 182.00226 267.32114 183.90175 268.49271 185.07332 c
269.66428 186.2449 271.56378 186.2449 272.73535 185.07332 c
f
0.17647059 0.21568628 0.23529412 sc
1 0 0 -1 -929 1235 cm
/F2.1[ 12 0 0 -12 0 0]sf
1023.0861 1071.724 m
(!")[ 7.648000 0.000000 ] xS
/F1.1[ 12 0 0 -12 0 0]sf
1034.842 1071.724 m
(")s
1039.838 1077.724 m
(#)s
/F2.1[ 12 0 0 -12 0 0]sf
1043.9341 1071.724 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
1048.27 1071.724 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
1056.6021 1071.724 m
($)s
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1059.156 1093.3744 m
1067.8721 1079.7217 l
S
0 J
0 j
[] 0 d
0 i
1072.177 1072.9786 m
1067.8721 1079.7217 l
1065.3435 1078.1073 m
1072.177 1072.9786 l
1070.4008 1081.3359 l
S
1054.8511 1100.1174 m
1059.156 1093.3744 l
1061.6846 1094.9886 m
1054.8511 1100.1174 l
1056.6273 1091.76 l
S
/Cs2 SC
0 sc
/F1.1[ 16 0 0 -16 0 0]sf
1040.854 929 m
($%%&'$\(\)*)[ 9.184000 11.856000 11.856000 4.448000 4.736000 9.184000 9.600000 8.896000 0.000000 ] xS
1.5 w
1 J
1 j
[
6
6
] 0 d
0.60000002 i
/Cs1 SC
0.69411802 0 0.109804 sc
1495.7678 1006.9762 m
1529.9388 1041.1471 1529.9388 1096.549 1495.7678 1130.7197 c
1461.597 1164.8907 1406.1952 1164.8907 1372.0243 1130.7197 c
1337.8533 1096.549 1337.8533 1041.1471 1372.0243 1006.9762 c
1406.1952 972.80518 1461.597 972.80518 1495.7678 1006.9762 c
S
1 w
[] 0 d
0 0 0 sc
1310.082 1204.748 m
1310.082 964.64801 l
S
0 i
CM
381.08203 278.35202 m
378.08203 270.35202 l
384.08203 270.35202 l
h
381.08203 278.35202 m
f
0 J
0 j
1 0 0 -1 -929 1235 cm
1310.082 956.64801 m
1307.082 964.64801 l
1313.082 964.64801 l
h
1310.082 956.64801 m
S
1 J
1 j
0.60000002 i
1310.082 1204.748 m
1550.182 1204.748 l
S
0 i
CM
629.18201 30.25201 m
621.18201 33.25201 l
621.18201 27.25201 l
h
629.18201 30.25201 m
f
0 J
0 j
1 0 0 -1 -929 1235 cm
1558.182 1204.748 m
1550.182 1201.748 l
1550.182 1207.748 l
h
1558.182 1204.748 m
S
0.64705884 0.84313726 0.82352942 sc
CM
398.91739 120.87333 m
400.08896 119.70176 400.08896 117.80226 398.91739 116.63069 c
397.74582 115.45911 395.84631 115.45911 394.67474 116.63069 c
393.50317 117.80226 393.50317 119.70176 394.67474 120.87333 c
395.84631 122.04491 397.74582 122.04491 398.91739 120.87333 c
f
1 0.75 0.75 sc
430.6174 170.87332 m
431.78897 169.70175 431.78897 167.80226 430.6174 166.63068 c
429.4458 165.45911 427.54633 165.45911 426.37476 166.63068 c
425.20319 167.80226 425.20319 169.70175 426.37476 170.87332 c
427.54633 172.04489 429.4458 172.04489 430.6174 170.87332 c
f
0.64705884 0.84313726 0.82352942 sc
482.41739 272.87332 m
483.58896 271.70175 483.58896 269.80225 482.41739 268.63068 c
481.24582 267.45911 479.34631 267.45911 478.17474 268.63068 c
477.00317 269.80225 477.00317 271.70175 478.17474 272.87332 c
479.34631 274.04489 481.24582 274.04489 482.41739 272.87332 c
f
557.91736 283.37332 m
559.08893 282.20175 559.08893 280.30228 557.91736 279.13071 c
556.74579 277.95911 554.84631 277.95911 553.67474 279.13071 c
552.50317 280.30228 552.50317 282.20175 553.67474 283.37332 c
554.84631 284.54492 556.74579 284.54492 557.91736 283.37332 c
f
1 0.75 0.75 sc
581.81738 128.67332 m
582.98895 127.50175 582.98895 125.60226 581.81738 124.43068 c
580.64581 123.2591 578.74634 123.2591 577.57477 124.43068 c
576.4032 125.60226 576.4032 127.50175 577.57477 128.67332 c
578.74634 129.84489 580.64581 129.84489 581.81738 128.67332 c
f
0.64705884 0.84313726 0.82352942 sc
430.6174 59.873329 m
431.78897 58.701756 431.78897 56.802265 430.6174 55.630692 c
429.4458 54.459114 427.54633 54.459114 426.37476 55.630692 c
425.20319 56.802265 425.20319 58.701756 426.37476 59.873329 c
427.54633 61.044907 429.4458 61.044907 430.6174 59.873329 c
f
623.21741 63.073315 m
624.38898 61.901745 624.38898 60.002251 623.21741 58.830681 c
622.04584 57.659103 620.1463 57.659103 618.97473 58.830681 c
617.80316 60.002251 617.80316 61.901745 618.97473 63.073315 c
620.1463 64.244896 622.04584 64.244896 623.21741 63.073315 c
f
0.82352942 0.05882353 0.21568628 sc
507.0174 168.27332 m
508.18896 167.10175 508.18896 165.20226 507.0174 164.03069 c
505.84583 162.8591 503.94632 162.8591 502.77475 164.03069 c
501.60318 165.20226 501.60318 167.10175 502.77475 168.27332 c
503.94632 169.4449 505.84583 169.4449 507.0174 168.27332 c
f
0.64705884 0.84313726 0.82352942 sc
392.91739 207.87332 m
394.08896 206.70175 394.08896 204.80226 392.91739 203.63069 c
391.74582 202.45912 389.84631 202.45912 388.67474 203.63069 c
387.50317 204.80226 387.50317 206.70175 388.67474 207.87332 c
389.84631 209.04491 391.74582 209.04491 392.91739 207.87332 c
f
547.71552 56.373329 m
548.88708 55.201756 548.88708 53.302265 547.71552 52.130692 c
546.54395 50.959114 544.64447 50.959114 543.4729 52.130692 c
542.30133 53.302265 542.30133 55.201756 543.4729 56.373329 c
544.64447 57.544907 546.54395 57.544907 547.71552 56.373329 c
f
0.82352942 0.05882353 0.21568628 sc
1 0 0 -1 -929 1235 cm
/F1.1[ 12 0 0 -12 0 0]sf
1424.5641 1057.4999 m
(!)s
1 0.75 0.75 sc
CM
482.41739 242.07332 m
483.58896 240.90175 483.58896 239.00226 482.41739 237.83069 c
481.24582 236.6591 479.34631 236.6591 478.17474 237.83069 c
477.00317 239.00226 477.00317 240.90175 478.17474 242.07332 c
479.34631 243.2449 481.24582 243.2449 482.41739 242.07332 c
f
553.41736 191.07332 m
554.58899 189.90175 554.58899 188.00226 553.41736 186.83069 c
552.24579 185.6591 550.34631 185.6591 549.17474 186.83069 c
548.00317 188.00226 548.00317 189.90175 549.17474 191.07332 c
550.34631 192.2449 552.24579 192.2449 553.41736 191.07332 c
f
0.64705884 0.84313726 0.82352942 sc
466.6174 83.773315 m
467.78897 82.601746 467.78897 80.702255 466.6174 79.530685 c
465.4458 78.3591 463.54633 78.3591 462.37476 79.530685 c
461.20319 80.702255 461.20319 82.601746 462.37476 83.773315 c
463.54633 84.944893 465.4458 84.944893 466.6174 83.773315 c
f
1 0.75 0.75 sc
484.41739 132.87332 m
485.58896 131.70175 485.58896 129.80225 484.41739 128.63068 c
483.24582 127.45911 481.34631 127.45911 480.17474 128.63068 c
479.00317 129.80225 479.00317 131.70175 480.17474 132.87332 c
481.34631 134.04489 483.24582 134.04489 484.41739 132.87332 c
f
0.64705884 0.84313726 0.82352942 sc
631.81738 185.07332 m
632.98895 183.90175 632.98895 182.00226 631.81738 180.83069 c
630.64581 179.6591 628.74634 179.6591 627.57477 180.83069 c
626.4032 182.00226 626.4032 183.90175 627.57477 185.07332 c
628.74634 186.2449 630.64581 186.2449 631.81738 185.07332 c
f
0.17647059 0.21568628 0.23529412 sc
1 0 0 -1 -929 1235 cm
/F2.1[ 12 0 0 -12 0 0]sf
1365.2301 1079.674 m
(!")[ 7.648000 0.000000 ] xS
/F1.1[ 12 0 0 -12 0 0]sf
1376.9861 1079.674 m
(+)s
1385.3181 1085.674 m
(#)s
/F2.1[ 12 0 0 -12 0 0]sf
1389.4141 1079.674 m
(#)s
/F1.1[ 12 0 0 -12 0 0]sf
1393.7501 1079.674 m
(!)s
/F2.1[ 12 0 0 -12 0 0]sf
1402.082 1079.674 m
(#%$)[ 4.336000 11.236000 0.000000 ] xS
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1418.238 1093.3744 m
1428.5688 1077.1925 l
S
0 J
0 j
[] 0 d
0 i
1432.8737 1070.4495 m
1428.5688 1077.1925 l
1426.0402 1075.5781 m
1432.8737 1070.4495 l
1431.0974 1078.8068 l
S
1413.9331 1100.1174 m
1418.238 1093.3744 l
1420.7666 1094.9886 m
1413.9331 1100.1174 l
1415.7094 1091.76 l
S
0.97254997 0.97646999 0.98039001 sc
CM
494 319.5 m
522 319.5 l
522 302.5 l
494 302.5 l
h
f
0 0 0 sc
1 0 0 -1 -929 1235 cm
/F3.1[ 14 0 0 -14 0 0]sf
1423.1807 929.46411 m
(!"")[ 7.786133 10.110352 0.000000 ] xS
0.17647059 0.21568628 0.23529412 sc
/F1.1[ 10 0 0 -10 0 0]sf
1065.5861 1116.248 m
(,)s
1118.4341 1064.048 m
(-)s
1006.97 1078.248 m
(.)s
1042.098 1013.048 m
(/)s
1135.498 1108.8999 m
(\))s
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0.82352942 0.05882353 0.21568628 sc
1443.63 1070.6536 m
1505.848 1082.1945 l
S
0 J
0 j
[] 0 d
0 i
1513.7139 1083.6534 m
1505.848 1082.1945 l
1506.3953 1079.2448 m
1513.7139 1083.6534 l
1505.3009 1085.1442 l
S
1435.7642 1069.1946 m
1443.63 1070.6536 l
1443.0829 1073.6033 m
1435.7642 1069.1946 l
1444.1771 1067.7039 l
S
0.97254902 0.97647059 0.98039216 sc
CM
546 175.5 m
554 175.5 l
554 158.5 l
546 158.5 l
h
f
0.82352942 0.05882353 0.21568628 sc
1 0 0 -1 -929 1235 cm
/F3.1[ 14 0 0 -14 0 0]sf
1475.0099 1073.3739 m
(!)s
/Cs2 SC
0 sc
/F1.1[ 16 0 0 -16 0 0]sf
1063.11 1225.748 m
(0)s
934.23804 1086.016 m
(1)s
1435.8961 1225.748 m
(0)s
1292.453 1085.558 m
(1)s
ep
end
%%Trailer
%%EOF
